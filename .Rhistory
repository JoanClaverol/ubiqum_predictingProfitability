size = 0.5,
curvature = -0.2,
arrow = arrow(length = unit(0.03, "npc"))) +
geom_label(aes(x = 100, y = 1400, label = "When the number of services starts\nto surpass 40, then the sales start to\ndecrease."),
label.size = NA,
size = 4,
colour = "darkred",
hjust = 0,
vjust = 0,
lineheight = 0.8) +
geom_label(aes(label = if_else(service_type %in% "Pos_Ser" &
service_quantity > 40 &
Vol < 1000, ProductType, NULL)),
label.size = NA,
size = 4,
colour = "darkgreen",
hjust = -0.5,
vjust = 1.2,
lineheight = 0,
alpha = 0.3) +
scale_color_manual(values = c("darkgreen","darkred"),
labels = c("Positive service", "Negative\nservice")) +
theme_classic() +
theme(axis.text.y = element_text(),
axis.text.x = element_text(),
legend.position = "none")
# taking out the outliers in positive service review
ex_prod_dummy %<>%
dplyr::filter(!(product_num %in% c("167")))
ex_prod_4mod <- ex_prod_dummy %>%
dplyr::select(Pos_Ser, Neg_Ser, Recomend, PC, Laptop,
Netb, Smart_Ph, total_stars, Vol)
# creating trainin and testing with the features selected
set.seed(123)
train_id <- createDataPartition(y = ex_prod_4mod$Vol,
p = 0.80,
list = F)
train <- ex_prod_4mod[train_id,]
test <- ex_prod_4mod[-train_id,]
# model creation
mod_4lm <- lm(formula = Vol ~., data = train)
# metrics
postResample(pred = predict(object = mod_4lm, newdata = test),
obs = test$Vol)
# looking at the metrics of the relevant categories
ex_prod_dummy %<>%
add_predictions(model = mod_4lm, var = "pred") %>%
add_residuals(model = mod_4lm, var = "resid")
ex_prod_dummy %>%
dplyr::filter(ProductType %in% rel_categories) -> ex_prod_filt
metrics_rel_prod <- postResample(pred = ex_prod_filt$pred, obs = ex_prod_filt$Vol)
# error plot
ex_prod_dummy %>%
ggplot(aes(x = pred, y = Vol)) +
geom_point(aes(color = (ProductType %in% rel_categories))) +
geom_abline(intercept = 0, slope = 1, color = "darkgray") +
geom_label(aes(label = if_else(abs(resid)>treshold &
ProductType %in% rel_categories,
product_num, NULL)),
hjust = 0,
vjust = 0.4,
colour = "red2",
fill = NA,
label.size = NA,
size = 3.5) +
geom_label(aes(x = 1230, y = 700,
label = paste0("The metrics for the relevant product types are:\n   - RMSE: ",round(metrics_rel_prod[[1]],3),"\n   - Rsquared: ",round(metrics_rel_prod[[2]],3),"\n   - MAE: ",round(metrics_rel_prod[[3]],3),"\n\nMy model has NOT improved.")),
label.size = NA,
size = 4.5,
colour = "red2",
hjust = 0,
vjust = 0.5,
lineheight = 0.8) +
labs(title = "Error visualizations 4th model (lm)",
x = "Predicted volume",
y = "Volume") +
scale_color_manual(values = c("grey","red")) +
theme_classic() +
theme(axis.text.y = element_text(),
axis.text.x = element_text(),
legend.title = element_blank(),
legend.position = "none") -> error_plot_mod4
error_plot_mod4
# removing predictions
ex_prod_dummy$pred <- NULL
ex_prod_dummy$resid <- NULL
# scaling variables
library(scales)
ex_prod_dummy$Pos_Ser_sc <- rescale(ex_prod_dummy$Pos_Ser)
ex_prod_dummy$Neg_Ser_sc <- rescale(ex_prod_dummy$Neg_Ser)
ex_prod_dummy$Recomend_sc <- rescale(ex_prod_dummy$Recomend)
ex_prod_dummy$total_stars_sc <- rescale(ex_prod_dummy$total_stars)
# creating training and testing
set.seed(123)
train_id <- createDataPartition(y = ex_prod_dummy$Vol,
p = 0.8,
list = F)
train <- ex_prod_dummy[train_id,]
test <- ex_prod_dummy[-train_id,]
#vector con nombres de las variables escaladas
sc_var <- c("Pos_Ser_sc","Neg_Ser_sc","Recomend_sc","total_stars_sc")
# modalization with knn
library(FNN)
mod_5knn <- knn.reg(train[,sc_var], # predictors
test[,sc_var], # validators
train$Vol, # variable to predict
k = 1, # nunmbers of neighbours
algorithm = "brute") # agorithm we are going to use
# checking the metrics
postResample(pred = mod_5knn$pred, obs = test$Vol)
rdacb.knn.reg <- function(tr_predictors, val_predictors,
tr_target, val_target, k){
library(FNN)
res <- knn.reg(tr_predictors, val_predictors,
tr_target, k, algorithm = "brute")
rmserror <- sqrt(mean((val_target - res$pred)^2))
# cat(paste("RMSE para k = ", toString(k), ": ", rmserror, "\n", sep = ""))
rmserror
}
radcb.knn.reg.multi <- function(tr_predictors, val_predictors,
tr_target, val_target, start_k, end_k){
rms_errors <- vector()
for(k in start_k:end_k){
rms_error <- rdacb.knn.reg(tr_predictors, val_predictors,
tr_target, val_target, k)
rms_errors <- c(rms_errors, rms_error)
}
plot(rms_errors, type = "o", xlab = "k", ylab = "RMSE", legend = c("test"))
legend("topright", legend=c("k = 11",
"RMSE = 80.658",
"r^2 = 0.965",
"MAE = 53.545"))
}
radcb.knn.reg.multi(train[,sc_var], test[,sc_var], train$Vol, test$Vol, 1, 15)
# defining train control
ctrl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 3)
# selecting 11 k to be more generalised
mod_5knn_caret <- caret::train(Vol ~.,
method = "knn",
data = train[,c(sc_var,"Vol")],
tuneGrid = expand.grid(k = c(11)),
trControl = ctrl)
postResample(pred = predict(object = mod_5knn_caret, newdata = test),
obs = test$Vol)
# looking at the metrics of the relevant categories
ex_prod_dummy %<>%
add_predictions(model = mod_5knn_caret, var = "pred") %>%
add_residuals(model = mod_5knn_caret, var = "resid")
ex_prod_dummy %>%
dplyr::filter(ProductType %in% rel_categories) -> ex_prod_filt
metrics_rel_prod <- postResample(pred = ex_prod_filt$pred, obs = ex_prod_filt$Vol)
# error plot
ex_prod_dummy %>%
ggplot(aes(x = pred, y = Vol)) +
geom_point(aes(color = (ProductType %in% rel_categories))) +
geom_abline(intercept = 0, slope = 1, color = "darkgray") +
geom_label(aes(label = if_else(abs(resid)>treshold &
ProductType %in% rel_categories,
product_num, NULL)),
hjust = 0,
vjust = 0.4,
colour = "red2",
fill = NA,
label.size = NA,
size = 3.5) +
geom_label(aes(x = 1230, y = 700,
label = paste0("The metrics for the relevant product types are:\n   - RMSE: ",round(metrics_rel_prod[[1]],3),"\n   - Rsquared: ",round(metrics_rel_prod[[2]],3),"\n   - MAE: ",round(metrics_rel_prod[[3]],3),"\n\nMy model has improved (previous RMSE was 117)")),
label.size = NA,
size = 4.5,
colour = "red2",
hjust = 0,
vjust = 0.5,
lineheight = 0.8) +
labs(title = "Error visualizations 4th model (lm)",
x = "Predicted volume",
y = "Volume") +
scale_color_manual(values = c("grey","red")) +
theme_classic() +
theme(axis.text.y = element_text(),
axis.text.x = element_text(),
legend.title = element_blank(),
legend.position = "none") -> error_plot_mod4
error_plot_mod4
# removing predictions
ex_prod_dummy$pred <- NULL
ex_prod_dummy$resid <- NULL
# error plot
ex_prod_dummy %>%
ggplot(aes(x = pred, y = Vol)) +
geom_point(aes(color = (ProductType %in% rel_categories))) +
geom_abline(intercept = 0, slope = 1, color = "darkgray") +
geom_label(aes(label = if_else(abs(resid)>treshold &
ProductType %in% rel_categories,
product_num, NULL)),
hjust = 0,
vjust = 0.4,
colour = "red2",
fill = NA,
label.size = NA,
size = 3.5) +
geom_label(aes(x = 400, y = 1750,
label = paste0("The metrics for the relevant product types are:\n   - RMSE: ",round(metrics_rel_prod[[1]],3),"\n   - Rsquared: ",round(metrics_rel_prod[[2]],3),"\n   - MAE: ",round(metrics_rel_prod[[3]],3),"\n\nMy model has improved (previous RMSE was 117)")),
label.size = NA,
size = 4.5,
colour = "red2",
hjust = 0,
vjust = 0.5,
lineheight = 0.8) +
labs(title = "Error visualizations 4th model (lm)",
x = "Predicted volume",
y = "Volume") +
scale_color_manual(values = c("grey","red")) +
theme_classic() +
theme(axis.text.y = element_text(),
axis.text.x = element_text(),
legend.title = element_blank(),
legend.position = "none") -> error_plot_mod4
# looking at the metrics of the relevant categories
ex_prod_dummy %<>%
add_predictions(model = mod_5knn_caret, var = "pred") %>%
add_residuals(model = mod_5knn_caret, var = "resid")
ex_prod_dummy %>%
dplyr::filter(ProductType %in% rel_categories) -> ex_prod_filt
metrics_rel_prod <- postResample(pred = ex_prod_filt$pred, obs = ex_prod_filt$Vol)
# error plot
ex_prod_dummy %>%
ggplot(aes(x = pred, y = Vol)) +
geom_point(aes(color = (ProductType %in% rel_categories))) +
geom_abline(intercept = 0, slope = 1, color = "darkgray") +
geom_label(aes(label = if_else(abs(resid)>treshold &
ProductType %in% rel_categories,
product_num, NULL)),
hjust = 0,
vjust = 0.4,
colour = "red2",
fill = NA,
label.size = NA,
size = 3.5) +
geom_label(aes(x = 400, y = 1750,
label = paste0("The metrics for the relevant product types are:\n   - RMSE: ",round(metrics_rel_prod[[1]],3),"\n   - Rsquared: ",round(metrics_rel_prod[[2]],3),"\n   - MAE: ",round(metrics_rel_prod[[3]],3),"\n\nMy model has improved (previous RMSE was 117)")),
label.size = NA,
size = 4.5,
colour = "red2",
hjust = 0,
vjust = 0.5,
lineheight = 0.8) +
labs(title = "Error visualizations 4th model (lm)",
x = "Predicted volume",
y = "Volume") +
scale_color_manual(values = c("grey","red")) +
theme_classic() +
theme(axis.text.y = element_text(),
axis.text.x = element_text(),
legend.title = element_blank(),
legend.position = "none") -> error_plot_mod4
# error plot
ex_prod_dummy %>%
ggplot(aes(x = pred, y = Vol)) +
geom_point(aes(color = (ProductType %in% rel_categories))) +
geom_abline(intercept = 0, slope = 1, color = "darkgray") +
geom_label(aes(label = if_else(abs(resid)>treshold &
ProductType %in% rel_categories,
product_num, NULL)),
hjust = 0,
vjust = 0.4,
colour = "red2",
fill = NA,
label.size = NA,
size = 3.5) +
geom_label(aes(x = 400, y = 1750,
label = paste0("The metrics for the relevant product types are:\n   - RMSE: ",round(metrics_rel_prod[[1]],3),"\n   - Rsquared: ",round(metrics_rel_prod[[2]],3),"\n   - MAE: ",round(metrics_rel_prod[[3]],3),"\n\nMy model has improved (previous RMSE was 117)")),
label.size = NA,
size = 4.5,
colour = "red2",
hjust = 0,
vjust = 0.5,
lineheight = 0.8) +
labs(title = "Error visualizations 4th model (lm)",
x = "Predicted volume",
y = "Volume") +
scale_color_manual(values = c("grey","red")) +
theme_classic() +
theme(axis.text.y = element_text(),
axis.text.x = element_text(),
legend.title = element_blank(),
legend.position = "none") -> error_plot_mod4
error_plot_mod4
# error plot
ex_prod_dummy %>%
ggplot(aes(x = pred, y = Vol)) +
geom_point(aes(color = (ProductType %in% rel_categories))) +
geom_abline(intercept = 0, slope = 1, color = "darkgray") +
geom_label(aes(label = if_else(abs(resid)>treshold &
ProductType %in% rel_categories,
product_num, NULL)),
hjust = 0,
vjust = 0.4,
colour = "red2",
fill = NA,
label.size = NA,
size = 3.5) +
geom_label(aes(x = 50, y = 1750,
label = paste0("The metrics for the relevant product types are:\n   - RMSE: ",round(metrics_rel_prod[[1]],3),"\n   - Rsquared: ",round(metrics_rel_prod[[2]],3),"\n   - MAE: ",round(metrics_rel_prod[[3]],3))),
label.size = NA,
size = 4.5,
colour = "red2",
hjust = 0,
vjust = 0.5,
lineheight = 0.8) +
labs(title = "Error visualizations 4th model (lm)",
x = "Predicted volume",
y = "Volume") +
scale_color_manual(values = c("grey","red")) +
theme_classic() +
theme(axis.text.y = element_text(),
axis.text.x = element_text(),
legend.title = element_blank(),
legend.position = "none") -> error_plot_mod4
error_plot_mod4
# error plot
ex_prod_dummy %>%
ggplot(aes(x = pred, y = Vol)) +
geom_point(aes(color = (ProductType %in% rel_categories))) +
geom_abline(intercept = 0, slope = 1, color = "darkgray") +
geom_label(aes(label = if_else(abs(resid)>treshold &
ProductType %in% rel_categories,
product_num, NULL)),
hjust = 0,
vjust = 0.4,
colour = "red2",
fill = NA,
label.size = NA,
size = 3.5) +
geom_label(aes(x = 50, y = 1750,
label = paste0("The metrics for the relevant product types are:\n   - RMSE: ",round(metrics_rel_prod[[1]],3),"\n   - Rsquared: ",round(metrics_rel_prod[[2]],3),"\n   - MAE: ",round(metrics_rel_prod[[3]],3),"\n\nThe errors of the points with the product\nnumber are higher than +/-",treshold," items.")),
label.size = NA,
size = 4.5,
colour = "red2",
hjust = 0,
vjust = 0.5,
lineheight = 0.8) +
labs(title = "Error visualizations 5th model (knn with caret)",
x = "Predicted volume",
y = "Volume") +
scale_color_manual(values = c("grey","red")) +
theme_classic() +
theme(axis.text.y = element_text(),
axis.text.x = element_text(),
legend.title = element_blank(),
legend.position = "none") -> error_plot_mod4
error_plot_mod4
# looking at the metrics of the relevant categories
ex_prod_dummy %<>%
add_predictions(model = mod_5knn_caret, var = "pred") %>%
add_residuals(model = mod_5knn_caret, var = "resid")
ex_prod_dummy %>%
dplyr::filter(ProductType %in% rel_categories) -> ex_prod_filt
metrics_rel_prod <- postResample(pred = ex_prod_filt$pred, obs = ex_prod_filt$Vol)
# error plot
ex_prod_dummy %>%
ggplot(aes(x = pred, y = Vol)) +
geom_point(aes(color = (ProductType %in% rel_categories))) +
geom_abline(intercept = 0, slope = 1, color = "darkgray") +
geom_label(aes(label = if_else(abs(resid)>treshold &
ProductType %in% rel_categories,
product_num, NULL)),
hjust = 0,
vjust = 0.4,
colour = "red2",
fill = NA,
label.size = NA,
size = 3.5) +
geom_label(aes(x = 50, y = 1750,
label = paste0("The metrics for the relevant product types are:\n   - RMSE: ",round(metrics_rel_prod[[1]],3),"\n   - Rsquared: ",round(metrics_rel_prod[[2]],3),"\n   - MAE: ",round(metrics_rel_prod[[3]],3),"\n\nThe points with the product number are higher\nthan +/-",treshold," items.")),
label.size = NA,
size = 4.5,
colour = "red2",
hjust = 0,
vjust = 0.5,
lineheight = 0.8) +
labs(title = "Error visualizations 5th model (knn with caret)",
x = "Predicted volume",
y = "Volume") +
scale_color_manual(values = c("grey","red")) +
theme_classic() +
theme(axis.text.y = element_text(),
axis.text.x = element_text(),
legend.title = element_blank(),
legend.position = "none") -> error_plot_mod4
error_plot_mod4
# removing predictions
ex_prod_dummy$pred <- NULL
ex_prod_dummy$resid <- NULL
# defining train control
ctrl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 3)
# selecting 11 k to be more generalised
mod_5knn_caret <- caret::train(Vol ~.,
method = "knn",
data = train[,c(sc_var,"Vol")],
tuneGrid = expand.grid(k = c(5)),
trControl = ctrl)
postResample(pred = predict(object = mod_5knn_caret, newdata = test),
obs = test$Vol)
# looking at the metrics of the relevant categories
ex_prod_dummy %<>%
add_predictions(model = mod_5knn_caret, var = "pred") %>%
add_residuals(model = mod_5knn_caret, var = "resid")
ex_prod_dummy %>%
dplyr::filter(ProductType %in% rel_categories) -> ex_prod_filt
metrics_rel_prod <- postResample(pred = ex_prod_filt$pred, obs = ex_prod_filt$Vol)
# error plot
ex_prod_dummy %>%
ggplot(aes(x = pred, y = Vol)) +
geom_point(aes(color = (ProductType %in% rel_categories))) +
geom_abline(intercept = 0, slope = 1, color = "darkgray") +
geom_label(aes(label = if_else(abs(resid)>treshold &
ProductType %in% rel_categories,
product_num, NULL)),
hjust = 0,
vjust = 0.4,
colour = "red2",
fill = NA,
label.size = NA,
size = 3.5) +
geom_label(aes(x = 50, y = 1750,
label = paste0("The metrics for the relevant product types are:\n   - RMSE: ",round(metrics_rel_prod[[1]],3),"\n   - Rsquared: ",round(metrics_rel_prod[[2]],3),"\n   - MAE: ",round(metrics_rel_prod[[3]],3),"\n\nThe points with the product number are higher\nthan +/-",treshold," items.")),
label.size = NA,
size = 4.5,
colour = "red2",
hjust = 0,
vjust = 0.5,
lineheight = 0.8) +
labs(title = "Error visualizations 5th model (knn with caret)",
x = "Predicted volume",
y = "Volume") +
scale_color_manual(values = c("grey","red")) +
theme_classic() +
theme(axis.text.y = element_text(),
axis.text.x = element_text(),
legend.title = element_blank(),
legend.position = "none") -> error_plot_mod4
error_plot_mod4
# removing predictions
ex_prod_dummy$pred <- NULL
ex_prod_dummy$resid <- NULL
postResample(pred = predict(object = mod_5knn_caret, newdata = test),
obs = test$Vol)
set.seed(123)
# defining train control
ctrl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 3)
# selecting 11 k to be more generalised
mod_5knn_caret <- caret::train(Vol ~.,
method = "knn",
data = train[,c(sc_var,"Vol")],
tuneGrid = expand.grid(k = c(5)),
trControl = ctrl)
postResample(pred = predict(object = mod_5knn_caret, newdata = test),
obs = test$Vol)
# looking at the metrics of the relevant categories
ex_prod_dummy %<>%
add_predictions(model = mod_5knn_caret, var = "pred") %>%
add_residuals(model = mod_5knn_caret, var = "resid")
ex_prod_dummy %>%
dplyr::filter(ProductType %in% rel_categories) -> ex_prod_filt
metrics_rel_prod <- postResample(pred = ex_prod_filt$pred, obs = ex_prod_filt$Vol)
# error plot
ex_prod_dummy %>%
ggplot(aes(x = pred, y = Vol)) +
geom_point(aes(color = (ProductType %in% rel_categories))) +
geom_abline(intercept = 0, slope = 1, color = "darkgray") +
geom_label(aes(label = if_else(abs(resid)>treshold &
ProductType %in% rel_categories,
product_num, NULL)),
hjust = 0,
vjust = 0.4,
colour = "red2",
fill = NA,
label.size = NA,
size = 3.5) +
geom_label(aes(x = 50, y = 1750,
label = paste0("The metrics for the relevant product types are:\n   - RMSE: ",round(metrics_rel_prod[[1]],3),"\n   - Rsquared: ",round(metrics_rel_prod[[2]],3),"\n   - MAE: ",round(metrics_rel_prod[[3]],3),"\n\nThe points with the product number are higher\nthan +/-",treshold," items.")),
label.size = NA,
size = 4.5,
colour = "red2",
hjust = 0,
vjust = 0.5,
lineheight = 0.8) +
labs(title = "Error visualizations 5th model (knn with caret)",
x = "Predicted volume",
y = "Volume") +
scale_color_manual(values = c("grey","red")) +
theme_classic() +
theme(axis.text.y = element_text(),
axis.text.x = element_text(),
legend.title = element_blank(),
legend.position = "none") -> error_plot_mod4
error_plot_mod4
# removing predictions
ex_prod_dummy$pred <- NULL
ex_prod_dummy$resid <- NULL
cor(ex_prod_dummy)
names(ex_prod_dummy)
crr_5th <- cor(ex_prod_dummy[,c("Pos_Ser","Neg_Ser","Recomend","Vol","total_stars")])
corrplot(corr_5th)
corrplot(crr_5th)
crr_5th
