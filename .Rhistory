hjust = 0,
vjust = 0.5,
lineheight = 0.8,
colour = "#555555",
fill = "white",
label.size = NA,
size = 4.5 ) +
theme_classic() +
theme(axis.text.y = element_text(),
axis.text.x = element_text(),
legend.title = element_blank()) +
labs(title = "Total sales vs total number of stars by product",
y = "Volume", x = "total number of stars")
# Correlation plot
ex_prod_corr <- cor(ex_prod_dummy %>%
select(-product_num, -x5, -x4, -x3, -x2, -x1,
-Profit_M, -Price))
corrplot(ex_prod_corr, method = "pie",
type = "lower", order = "FPC",
col = brewer.pal(n = 8, name = "RdBu"),
number.cex = 0.9, number.digits = 2,
tl.cex = 1.2, tl.srt = 1, tl.col = "black")
# Correlation plot
ex_prod_corr <- cor(ex_prod_dummy %>%
select(-product_num, -x5, -x3, -x1, -total_stars,
-Profit_M, -Price))
corrplot(ex_prod_corr, method = "pie",
type = "lower", order = "FPC",
col = brewer.pal(n = 8, name = "RdBu"),
number.cex = 0.9, number.digits = 2,
tl.cex = 1.2, tl.srt = 1, tl.col = "black")
ex_prod_dummy %<>%
select(-x5, -x3, -x1, -total_stars, -Profit_M, -Price) %>%
column_to_rownames(var = "product_num")
# creating trainin and testing with the features selected
set.seed(123)
train_id <- createDataPartition(y = ex_prod_dummy$Vol,
p = 0.80,
list = F)
train <- ex_prod_dummy[train_id,]
test <- ex_prod_dummy[-train_id,]
# model creation
mod_3lm <- lm(formula = Vol ~., data = train)
# model performance
train_res_mod3 <- postResample(pred = predict(object = mod_3lm, newdata = train),
obs = train$Vol)
results_mod3 <- postResample(pred = predict(object = mod_3lm, newdata = test),
obs = test$Vol)
# creating a grid with the different results
table_mod3 <- tribble(~metric,   ~train           ,        ~test     ,
"RMSE" , round(train_res_mod3[[1]],2), round(results_mod3[[1]],2),
"R^2"  , paste(round(train_res_mod3[[2]]*100,2),"%"), paste(round(results_mod3[[2]]*100,2),"%"))
kable(table_mod3) %>%
kable_styling(bootstrap_options = c("hover"),
full_width = F, position = "center", fixed_thead = T)
# adding product number to datasets and creating one only with categories
ex_prod$product_num <- rownames(ex_prod)
ex_prod_dummy$product_num <- rownames(ex_prod_dummy)
product_cat <- ex_prod %>% select(product_num, ProductType)
# define the treshold of the errors and relevant categories
treshold <- 80
rel_categories <- c("PC","Laptop","Smartphone","Netbooks")
# looking at the metrics of the relevant categories
ex_prod_dummy %<>%
left_join(y = product_cat, by = "product_num") %>%
add_predictions(model = mod_3lm, var = "pred") %>%
add_residuals(model = mod_3lm, var = "resid")
ex_prod_dummy %>%
dplyr::filter(ProductType %in% rel_categories) -> ex_prod_filt
metrics_rel_prod <- postResample(pred = ex_prod_filt$pred, obs = ex_prod_filt$Vol)
#        RMSE    Rsquared         MAE
# 117.8325360   0.9455967  82.2058960
# error plot
ex_prod_dummy %>%
ggplot(aes(x = pred, y = Vol)) +
geom_point(aes(color = (ProductType %in% rel_categories))) +
geom_abline(intercept = 0, slope = 1, color = "darkgray") +
geom_label(aes(label = if_else(abs(resid)>treshold &
ProductType %in% rel_categories,
paste(ProductType, product_num), NULL)),
hjust = 0,
vjust = 0.4,
colour = "red2",
fill = NA,
label.size = NA,
size = 3.5) +
geom_label(aes(x = -300, y = 2000,
label = paste0("The metrics for the relevant product types are:\n   - RMSE: ",round(metrics_rel_prod[[1]],3),"\n   - Rsquared: ",round(metrics_rel_prod[[2]],3),"\n   - MAE: ",round(metrics_rel_prod[[3]],3))),
label.size = NA,
size = 4.5,
colour = "red2",
hjust = 0,
vjust = 0.5,
lineheight = 0.8) +
labs(title = "Error visualizations 3rd model (lm)",
x = "Predicted volume",
y = "Volume") +
scale_color_manual(values = c("grey","red")) +
theme_classic() +
theme(axis.text.y = element_text(),
axis.text.x = element_text(),
legend.title = element_blank(),
legend.position = "none") -> error_plot_mod3
error_plot_mod3
ex_prod_dummy %>%
group_by(as.factor(Recomend)) %>%
mutate(outlier=ifelse(is_outlier(Vol),as.numeric(product_num),
as.numeric(NA))) %>%
ggplot(aes(x = as.factor(Recomend), y = Vol)) +
geom_boxplot(outlier.color = "red", col = "dodgerblue3") +
geom_label(aes(label = outlier), hjust = 0,
vjust = 0, check_overlap = TRUE,
colour = "red",
fill = NA,
label.size = NA,
size = 3.5) +
geom_label(aes(x = "0.1", y = 2000,
label = "There is an increase of the range related to the increment\nof the % recommendation. Problem: Big dispersion for higer rates.\n100% recommendation has 0 volume."),
label.size = NA,
size = 3.5,
colour = "#555555",
hjust = 0,
vjust = 0.5,
lineheight = 0.8) +
theme_classic() +
labs(title = "Distribution of the volume for each recommendation",
x = "% of product recommendation", y = "Volume")
kable(ex_prod_dummy %>%
select(product_num, ProductType, Pos_Ser, Neg_Ser, Recomend, Vol) %>%
filter(ProductType %in% c("ExtendedWarranty")), format = "html") %>%
kable_styling(bootstrap_options = c("hover"),
full_width = T, position = "center", fixed_thead = T) %>%
row_spec(3:10, bold = T, background = "#f0f5f0")
ex_prod_dummy %<>%
dplyr::distinct(ProductType, Pos_Ser, Neg_Ser, Recomend, Vol,
.keep_all = TRUE)
ex_prod_dummy %>%
gather(key = "service_type", value = "service_quantity", Pos_Ser, Neg_Ser) %>%
ggplot(aes(y = Vol, x = service_quantity, color = service_type)) +
geom_point(alpha = 0.35) +
geom_smooth(se = F, size = 0.15) +
labs(title = "Total volume vs the total quantity of services",
x = "Number of services", y = "Volume") +
geom_label(aes(x = 52, y = 890, label = "Positive\nservice"),
label.size = NA,
size = 4,
colour = "darkgreen",
hjust = 0,
vjust = 0,
lineheight = 0.8) +
geom_label(aes(x = 300, y = 525, label = "Negative\nservice"),
label.size = NA,
size = 4,
colour = "darkred",
lineheight = 0.8) +
geom_curve(aes(xend = 35, yend = 1270, x = 100, y = 1450),
colour = "darkred",
size = 0.5,
curvature = -0.2,
arrow = arrow(length = unit(0.03, "npc"))) +
geom_label(aes(x = 100, y = 1400, label = "When the number of services start\nto surpass 40 negative services, then\nthe sales start to decrease."),
label.size = NA,
size = 4,
colour = "darkred",
hjust = 0,
vjust = 0,
lineheight = 0.8) +
geom_text(aes(label = if_else(service_type %in% "Pos_Ser" &
service_quantity > 40 &
Vol < 1000, ProductType, NULL)),
size = 4,
colour = "darkgreen",
hjust = -0.5,
vjust = 1.2,
lineheight = 0,
alpha = 0.3) +
scale_color_manual(values = c("darkgreen","darkred"),
labels = c("Positive service", "Negative\nservice")) +
theme_classic() +
theme(axis.text.y = element_text(),
axis.text.x = element_text(),
legend.position = "none")
# taking out the outliers in positive service review
ex_prod_dummy %<>%
dplyr::filter(!(product_num %in% c("167")))
ex_prod_4mod <- ex_prod_dummy %>%
dplyr::select(x2, x4, Pos_Ser, Neg_Ser, Recomend, PC, Laptop,
Netb, Smart_Ph, Vol)
# creating trainin and testing with the features selected
set.seed(123)
train_id <- createDataPartition(y = ex_prod_4mod$Vol,
p = 0.80,
list = F)
train <- ex_prod_4mod[train_id,]
test <- ex_prod_4mod[-train_id,]
# model creation
mod_4lm <- lm(formula = Vol ~., data = train)
# model performance
train_res_mod4 <- postResample(pred = predict(object = mod_4lm, newdata = train),
obs = train$Vol)
results_mod4 <- postResample(pred = predict(object = mod_4lm, newdata = test),
obs = test$Vol)
# creating a grid with the different results
table_mod4 <- tribble(~metric,   ~train           ,        ~test     ,
"RMSE" , round(train_res_mod4[[1]],2), round(results_mod4[[1]],2),
"R^2"  , paste(round(train_res_mod4[[2]]*100,2),"%"), paste(round(results_mod4[[2]]*100,2),"%"))
kable(table_mod4) %>%
kable_styling(bootstrap_options = c("hover"),
full_width = F, position = "center", fixed_thead = T)
# looking at the metrics of the relevant categories
ex_prod_dummy %<>%
add_predictions(model = mod_4lm, var = "pred") %>%
add_residuals(model = mod_4lm, var = "resid")
ex_prod_dummy %>%
dplyr::filter(ProductType %in% rel_categories) -> ex_prod_filt
metrics_rel_prod <- postResample(pred = ex_prod_filt$pred, obs = ex_prod_filt$Vol)
# error plot
ex_prod_dummy %>%
ggplot(aes(x = pred, y = Vol)) +
geom_point(aes(color = (ProductType %in% rel_categories))) +
geom_abline(intercept = 0, slope = 1, color = "darkgray") +
geom_label(aes(label = if_else(abs(resid)>treshold &
ProductType %in% rel_categories,
paste(ProductType, product_num), NULL)),
hjust = 0,
vjust = 0.4,
colour = "red2",
fill = NA,
label.size = NA,
size = 3.5) +
geom_label(aes(x = -300, y = 2000,
label = paste0("The metrics for the relevant product types are:\n   - RMSE: ",round(metrics_rel_prod[[1]],3),"\n   - Rsquared: ",round(metrics_rel_prod[[2]],3),"\n   - MAE: ",round(metrics_rel_prod[[3]],3))),
label.size = NA,
size = 4.5,
colour = "red2",
hjust = 0,
vjust = 0.5,
lineheight = 0.8) +
labs(title = "Error visualizations 4th model (lm)",
x = "Predicted volume",
y = "Volume") +
scale_color_manual(values = c("grey","red")) +
theme_classic() +
theme(axis.text.y = element_text(),
axis.text.x = element_text(),
legend.title = element_blank(),
legend.position = "none") -> error_plot_mod4
error_plot_mod4
# removing predictions
ex_prod_dummy$pred <- NULL
ex_prod_dummy$resid <- NULL
# creating training and testing
set.seed(123)
train_id <- createDataPartition(y = ex_prod_dummy$Vol,
p = 0.8,
list = F)
train <- ex_prod_dummy[train_id,]
test <- ex_prod_dummy[-train_id,]
# defining variables to create the model
rel_var <- c("x4","x2","Pos_Ser","Neg_Ser","Recomend","Vol","PC","Laptop",
"Netb","Smart_Ph")
# cross validation
ctrl <- caret::trainControl(method = "repeatedcv",
number = 10,
repeats = 3)
# modalization
mod_5knn_caret <- caret::train(Vol ~.,
method = "knn",
data = train[,rel_var],
trControl = ctrl,
preProcess = c("center","scale"))
# model performance
train_res_mod5 <- postResample(pred = predict(object = mod_5knn_caret,
newdata = train),
obs = train$Vol)
results_mod5 <- postResample(pred = predict(object = mod_5knn_caret,
newdata = test),
obs = test$Vol)
# creating a grid with the different results
table_mod5 <- tribble(~metric,   ~train           ,        ~test     ,
"RMSE" , round(train_res_mod5[[1]],2), round(results_mod5[[1]],2),
"R^2"  , paste(round(train_res_mod5[[2]]*100,2),"%"), paste(round(results_mod5[[2]]*100,2),"%"))
kable(table_mod5) %>%
kable_styling(bootstrap_options = c("hover"),
full_width = F, position = "center", fixed_thead = T)
# looking at the metrics of the relevant categories
ex_prod_dummy %<>%
add_predictions(model = mod_5knn_caret, var = "pred") %>%
add_residuals(model = mod_5knn_caret, var = "resid")
ex_prod_dummy %>%
dplyr::filter(ProductType %in% rel_categories) -> ex_prod_filt
metrics_rel_prod <- postResample(pred = ex_prod_filt$pred, obs = ex_prod_filt$Vol)
# error plot
ex_prod_dummy %>%
ggplot(aes(x = pred, y = Vol)) +
geom_point(aes(color = (ProductType %in% rel_categories))) +
geom_abline(intercept = 0, slope = 1, color = "darkgray") +
geom_label(aes(label = if_else(abs(resid)>treshold &
ProductType %in% rel_categories,
paste(ProductType, product_num), NULL)),
hjust = 0,
vjust = 0.4,
colour = "red2",
fill = NA,
label.size = NA,
size = 3.5) +
geom_label(aes(x = 10, y = 2000,
label = paste0("The metrics for the relevant product types are:\n   - RMSE: ",round(metrics_rel_prod[[1]],3),"\n   - Rsquared: ",round(metrics_rel_prod[[2]],3),"\n   - MAE: ",round(metrics_rel_prod[[3]],3))),
label.size = NA,
size = 4.5,
colour = "red2",
hjust = 0,
vjust = 0.5,
lineheight = 0.8) +
labs(title = paste("Error visualizations 5th model with knn, k =",mod_5knn_caret$bestTune[[1]]),
x = "Predicted volume",
y = "Volume") +
scale_color_manual(values = c("grey","red")) +
theme_classic() +
theme(axis.text.y = element_text(),
axis.text.x = element_text(),
legend.title = element_blank(),
legend.position = "none") -> error_plot_mod4
error_plot_mod4
# removing predictions
ex_prod_dummy$pred <- NULL
ex_prod_dummy$resid <- NULL
set.seed(123)
mod_6rf <- caret::train(Vol ~ .,
method = "rf",
data = train[,rel_var],
trControl = ctrl)
# model performance
train_res_mod6 <- postResample(pred = predict(object = mod_6rf,
newdata = train),
obs = train$Vol)
results_mod6 <- postResample(pred = predict(object = mod_6rf,
newdata = test),
obs = test$Vol)
# creating a grid with the different results
table_mod6 <- tribble(~metric,   ~train           ,        ~test     ,
"RMSE" , round(train_res_mod6[[1]],2), round(results_mod6[[1]],2),
"R^2"  , paste(round(train_res_mod6[[2]]*100,2),"%"), paste(round(results_mod6[[2]]*100,2),"%"))
kable(table_mod6) %>%
kable_styling(bootstrap_options = c("hover"),
full_width = F, position = "center", fixed_thead = T)
# looking at the metrics of the relevant categories
ex_prod_dummy %<>%
add_predictions(model = mod_6rf, var = "pred") %>%
add_residuals(model = mod_6rf, var = "resid")
ex_prod_dummy %>%
dplyr::filter(ProductType %in% rel_categories) -> ex_prod_filt
metrics_rel_prod <- postResample(pred = ex_prod_filt$pred, obs = ex_prod_filt$Vol)
# error plot
ex_prod_dummy %>%
ggplot(aes(x = pred, y = Vol)) +
geom_point(aes(color = (ProductType %in% rel_categories))) +
geom_abline(intercept = 0, slope = 1, color = "darkgray") +
geom_label(aes(label = if_else(abs(resid)>treshold &
ProductType %in% rel_categories,
paste(ProductType, product_num), NULL)),
hjust = 0,
vjust = 0.4,
colour = "red2",
fill = NA,
label.size = NA,
size = 3.5) +
geom_label(aes(x = 10, y = 2000,
label = paste0("The metrics for the relevant product types are:\n   - RMSE: ",round(metrics_rel_prod[[1]],3),"\n   - Rsquared: ",round(metrics_rel_prod[[2]],3),"\n   - MAE: ",round(metrics_rel_prod[[3]],3))),
label.size = NA,
size = 4.5,
colour = "red2",
hjust = 0,
vjust = 0.5,
lineheight = 0.8) +
labs(title = "Error visualizations 6th model rf",
x = "Predicted volume",
y = "Volume") +
scale_color_manual(values = c("grey","red")) +
theme_classic() +
theme(axis.text.y = element_text(),
axis.text.x = element_text(),
legend.title = element_blank(),
legend.position = "none") -> error_plot_mod4
error_plot_mod4
# removing predictions
ex_prod_dummy$pred <- NULL
ex_prod_dummy$resid <- NULL
set.seed(123)
mod_7svm <- caret::train(Vol ~ .,
method = "svmLinear",
data = train[,rel_var],
trControl = ctrl)
# model performance
train_res_mod7 <- postResample(pred = predict(object = mod_7svm,
newdata = train),
obs = train$Vol)
results_mod7 <- postResample(pred = predict(object = mod_7svm,
newdata = test),
obs = test$Vol)
# creating a grid with the different results
table_mod7 <- tribble(~metric,   ~train           ,        ~test     ,
"RMSE" , round(train_res_mod7[[1]],2), round(results_mod7[[1]],2),
"R^2"  , paste(round(train_res_mod7[[2]]*100,2),"%"), paste(round(results_mod7[[2]]*100,2),"%"))
kable(table_mod7) %>%
kable_styling(bootstrap_options = c("hover"),
full_width = F, position = "center", fixed_thead = T)
# looking at the metrics of the relevant categories
ex_prod_dummy %<>%
add_predictions(model = mod_7svm, var = "pred") %>%
add_residuals(model = mod_7svm, var = "resid")
ex_prod_dummy %>%
dplyr::filter(ProductType %in% rel_categories) -> ex_prod_filt
metrics_rel_prod <- postResample(pred = ex_prod_filt$pred, obs = ex_prod_filt$Vol)
# error plot
ex_prod_dummy %>%
ggplot(aes(x = pred, y = Vol)) +
geom_point(aes(color = (ProductType %in% rel_categories))) +
geom_abline(intercept = 0, slope = 1, color = "darkgray") +
geom_label(aes(label = if_else(abs(resid)>treshold &
ProductType %in% rel_categories,
paste(ProductType, product_num), NULL)),
hjust = 0,
vjust = 0.4,
colour = "red2",
fill = NA,
label.size = NA,
size = 3.5) +
geom_label(aes(x = 10, y = 2000,
label = paste0("The metrics for the relevant product types are:\n   - RMSE: ",round(metrics_rel_prod[[1]],3),"\n   - Rsquared: ",round(metrics_rel_prod[[2]],3),"\n   - MAE: ",round(metrics_rel_prod[[3]],3))),
label.size = NA,
size = 4.5,
colour = "red2",
hjust = 0,
vjust = 0.5,
lineheight = 0.8) +
labs(title = "Error visualizations 6th model rf",
x = "Predicted volume",
y = "Volume") +
scale_color_manual(values = c("grey","red")) +
theme_classic() +
theme(axis.text.y = element_text(),
axis.text.x = element_text(),
legend.title = element_blank(),
legend.position = "none") -> error_plot_mod4
error_plot_mod4
# removing predictions
ex_prod_dummy$pred <- NULL
ex_prod_dummy$resid <- NULL
new_prod$ProductType <- factor(new_prod$ProductType)
new_prod %<>%
fastDummies::dummy_columns(remove_first_dummy = FALSE) %>%
select(ProductType_PC,ProductType_Laptop,ProductType_Netbook,
ProductType_Smartphone,x4StarReviews,x2StarReviews,
PositiveServiceReview,NegativeServiceReview,Recommendproduct,
Volume,ProductType,ProductNum,ProfitMargin) %>%
rename(PC = ProductType_PC,
Laptop = ProductType_Laptop,
Netb = ProductType_Netbook,
Smart_Ph = ProductType_Smartphone,
x4 = x4StarReviews,
x2 = x2StarReviews,
Pos_Ser = PositiveServiceReview,
Neg_Ser = NegativeServiceReview,
Recomend = Recommendproduct,
Vol = Volume,
product_num = ProductNum) %>%
mutate(data_type = "new_products")
new_prod$product_num <- as.character(new_prod$product_num)
best_new <- new_prod %>%
add_predictions(model = mod_6rf, var = "Vol") %>%
select(ProductType, product_num, Vol, ProfitMargin) %>%
filter(ProductType %in% rel_categories) %>%
mutate(Total_Profits = ProfitMargin*Vol,
Total_Profits_Dol = paste(round((Total_Profits), 0),"$"),
type_num = paste(ProductType, product_num)) %>%
arrange(Total_Profits)
best_new_position <- unique(best_new$type_num)
best_new %>%
ggplot() +
geom_col(aes(x = paste(ProductType, product_num), y = -Total_Profits), fill = "gold") +
geom_col(aes(x = paste(ProductType, product_num), y = Vol), fill = "dodgerblue3") +
coord_flip() +
scale_y_continuous(limits = c(-150,700), labels = NULL) +
geom_label(aes(x = paste(ProductType, product_num),
y = -Total_Profits,
label = Total_Profits_Dol),
hjust = 1,
vjust = 0.4,
colour = "goldenrod3",
fill = NA,
label.size = NA,
size = 3.5) +
geom_label(aes(x = paste(ProductType, product_num),
y = Vol,
label = round(Vol, 0)),
hjust = 0,
vjust = 0.4,
colour = "dodgerblue4",
fill = NA,
label.size = NA,
size = 3.5) +
scale_x_discrete(limits = best_new_position) +
labs(title = "Predicitng sales of new products",
subtitle = "Pred. Profits ($) vs Pred. Volume (items) for Random Forest model") +
theme(legend.position = "bottom",
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5)) + theme_void() -> p1
p1 + theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_text())
